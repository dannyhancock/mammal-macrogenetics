# remove allres and biores and apply ranking
r_ranks <- t(apply(-r_scores[,c('landres', 'env', 'geog')], 1, rank))
r_ranks_df <- data.frame(species = r_scores$species, r_ranks)
# merge with metadata to combine no. populations and maximum distance between pops
r_df <- merge(r_ranks_df, metadata, by = 'species')
# find the top ranked driver for each species
ranked_columns <- c("landres", "env", "geog")
r_df$top_ranked <- apply(r_df[, ranked_columns], 1, function(x) ranked_columns[which.min(x)])
r_df$top_ranked <- factor(r_df$top_ranked, levels = c("landres", "env", "geog"))
### No. populations ###
# Drop outlier as multinomial logistic regression is sensitive to extreme values
pop_r_df <- r_df[r_df$species != 'bank_vole',]
r_df
r_df
pop_r_df <- r_df[r_df$species != 'bank_vole',]
pop_mod <- nnet::multinom(top_ranked ~ populations, data = pop_r_df)
summary(pop_mod)
pop_pv <- calculate_p_values(pop_mod)
print("p values for effect of population (MRM ranks):")
pop_pv
# Calculating Odds Ratios
exp(coef(pop_mod))
# Plot the results
# Generate a sequence of values for populations
pop_seq <- seq(min(pop_r_df$populations), max(pop_r_df$populations), length.out = 120)
# Create a new data frame for predictions
new_data <- data.frame(populations = pop_seq)
# Predict probabilities
pred_probs <- predict(pop_mod, new_data, type = "probs")
# Convert predictions to long format for plotting
pred_probs_long <- gather(data.frame(populations = pop_seq, pred_probs),
key = "Category", value = "Probability", -populations)
pred_probs_long$Category <- factor(pred_probs_long$Category,
levels = c("geog", "env", "landres"),
labels = c("IBD", "IBE", "IBR"))
# Plot
mrm_popplot <- plot_multinom(pred_probs_long, "populations", "n.s.")
mrm_popplot
### Spatial Scale ###
# Fit the multinomial logistic regression model
dist_mod <- nnet::multinom(top_ranked ~ as.numeric(max_dist), data = r_df)
summary(dist_mod)
dist_mod
spatial_pv <- calculate_p_values(dist_mod)
print("p values effect of spatial scale (MRM rankings):")
spatial_pv
# Calculating Odds Ratios
exp(coef(dist_mod))
pp <- fitted(dist_mod)
pp
# Plot the results
# Generate a sequence of values for populations
dist_pop_seq <- seq(min(r_df$max_dist), max(r_df$max_dist), length.out = 120)
# Create a new data frame for predictions
dist_new_data <- data.frame(max_dist = dist_pop_seq)
# Predict probabilities
dist_pred_probs <- predict(dist_mod, dist_new_data, type = "probs")
# Convert predictions to long format for plotting
dist_pred_probs_long <- gather(data.frame(max_dist = dist_pop_seq, dist_pred_probs),
key = "Category", value = "Probability", -max_dist)
dist_pred_probs_long$Category <- factor(dist_pred_probs_long$Category,
levels = c("geog", "env", "landres"),
labels = c("IBD", "IBE", "IBR"))
mrm_distplot <- plot_multinom(dist_pred_probs_long, "max_dist", "*  ", sig_size=10)
mrm_distplot
r_df
metadata_sheet <- read.csv("metadata.csv")
metadata <- metadata_sheet[,c('species', 'populations', 'max_dist')]
##############
## R2 RANKS ##
##############
r_scores <- read.csv('mrm_r2_results.csv')
# quick checks
identical(nrow(metadata), nrow(r_scores))
identical(metadata$species, r_scores$species)
# remove allres and biores and apply ranking
r_ranks <- t(apply(-r_scores[,c('landres', 'env', 'geog')], 1, rank))
r_ranks_df <- data.frame(species = r_scores$species, r_ranks)
# merge with metadata to combine no. populations and maximum distance between pops
r_df <- merge(r_ranks_df, metadata, by = 'species')
# find the top ranked driver for each species
ranked_columns <- c("landres", "env", "geog")
r_df$top_ranked <- apply(r_df[, ranked_columns], 1, function(x) ranked_columns[which.min(x)])
r_df$top_ranked <- factor(r_df$top_ranked, levels = c("landres", "env", "geog"))
### No. populations ###
# Drop outlier as multinomial logistic regression is sensitive to extreme values
pop_r_df <- r_df[r_df$species != 'bank_vole',]
pop_mod <- nnet::multinom(top_ranked ~ populations, data = pop_r_df)
summary(pop_mod)
pop_pv <- calculate_p_values(pop_mod)
print("p values for effect of population (MRM ranks):")
pop_pv
# Calculating Odds Ratios
exp(coef(pop_mod))
# Plot the results
# Generate a sequence of values for populations
pop_seq <- seq(min(pop_r_df$populations), max(pop_r_df$populations), length.out = 120)
# Create a new data frame for predictions
new_data <- data.frame(populations = pop_seq)
# Predict probabilities
pred_probs <- predict(pop_mod, new_data, type = "probs")
# Convert predictions to long format for plotting
pred_probs_long <- gather(data.frame(populations = pop_seq, pred_probs),
key = "Category", value = "Probability", -populations)
pred_probs_long$Category <- factor(pred_probs_long$Category,
levels = c("geog", "env", "landres"),
labels = c("IBD", "IBE", "IBR"))
# Plot
mrm_popplot <- plot_multinom(pred_probs_long, "populations", "n.s.")
mrm_popplot
### Spatial Scale ###
# Fit the multinomial logistic regression model
dist_mod <- nnet::multinom(top_ranked ~ as.numeric(max_dist), data = r_df)
summary(dist_mod)
dist_mod
spatial_pv <- calculate_p_values(dist_mod)
print("p values effect of spatial scale (MRM rankings):")
spatial_pv
# Calculating Odds Ratios
exp(coef(dist_mod))
pp <- fitted(dist_mod)
pp
# Plot the results
# Generate a sequence of values for populations
dist_pop_seq <- seq(min(r_df$max_dist), max(r_df$max_dist), length.out = 120)
# Create a new data frame for predictions
dist_new_data <- data.frame(max_dist = dist_pop_seq)
# Predict probabilities
dist_pred_probs <- predict(dist_mod, dist_new_data, type = "probs")
# Convert predictions to long format for plotting
dist_pred_probs_long <- gather(data.frame(max_dist = dist_pop_seq, dist_pred_probs),
key = "Category", value = "Probability", -max_dist)
dist_pred_probs_long$Category <- factor(dist_pred_probs_long$Category,
levels = c("geog", "env", "landres"),
labels = c("IBD", "IBE", "IBR"))
mrm_distplot <- plot_multinom(dist_pred_probs_long, "max_dist", "*  ", sig_size=10)
mrm_distplot
########################
# Repeat for AIC ranks #
########################
aic_scores <- read.csv('aic_results.csv')
# quick checks
identical(nrow(metadata), nrow(aic_scores))
identical(metadata$species, aic_scores$species)
# remove allres and biores and apply ranking
aic_ranks <- t(apply(aic_scores[,c('landres', 'env', 'geog')], 1, rank))
aic_ranks_df <- data.frame(species = aic_scores$species, aic_ranks)
# merge with metadata to combine no. populations and maximum distance between pops
aic_df <- merge(aic_ranks_df, metadata, by = 'species')
aic_df <- aic_df[aic_df$species != 'sugar_glider',]
# find the top ranked driver for each species
aic_df$top_ranked <- apply(aic_df[, ranked_columns], 1, function(x) ranked_columns[which.min(x)])
aic_df$top_ranked <- factor(aic_df$top_ranked, levels = c("landres", "env", "geog"))
### No. populations ###
# Drop outlier as multinomial logistic regression is sensitive to extreme values
aic_df <- aic_df[aic_df$species != 'bank_vole',]
aic_pop_mod <- nnet::multinom(top_ranked ~ populations, data = aic_df)
summary(aic_pop_mod)
aic_pop_pv <- calculate_p_values(aic_pop_mod)
aic_pop_pv
# Calculating Odds Ratios
exp(coef(aic_pop_mod))
# Plot the results
# Generate a sequence of values for populations
aic_pop_seq <- seq(min(aic_df$populations), max(aic_df$populations), length.out = 120)
# Create a new data frame for predictions
aic_new_data <- data.frame(populations = aic_pop_seq)
# Predict probabilities
aic_pred_probs <- predict(aic_pop_mod, aic_new_data, type = "probs")
# Convert predictions to long format for plotting
aic_pop_pred_probs_long <- gather(data.frame(populations = aic_pop_seq, aic_pred_probs),
key = "Category", value = "Probability", -populations)
aic_pop_pred_probs_long$Category <- factor(aic_pop_pred_probs_long$Category,
levels = c("geog", "env", "landres"),
labels = c("IBD", "IBE", "IBR"))
aic_popplot <- plot_multinom(aic_pop_pred_probs_long, "populations", "n.s.")
aic_popplot
### Spatial Scale ###
# Fit the multinomial logistic regression model
aic_dist_mod <- nnet::multinom(top_ranked ~ as.numeric(max_dist), data = aic_df)
summary(aic_dist_mod)
aic_spatial_pv <- calculate_p_values(aic_dist_mod)
aic_spatial_pv
# Calculating Odds Ratios
exp(coef(aic_dist_mod))
pp <- fitted(aic_dist_mod)
pp
# Plot the results
# Generate a sequence of values for populations
aic_dist_seq <- seq(min(aic_df$max_dist), max(aic_df$max_dist), length.out = 105)
# Create a new data frame for predictions
aic_dist_new_data <- data.frame(max_dist = aic_dist_seq)
# Predict probabilities
aic_dist_pred_probs <- predict(aic_dist_mod, aic_dist_new_data, type = "probs")
# Convert predictions to long format for plotting
aic_dist_pred_probs_long <- gather(data.frame(max_dist = aic_dist_seq, aic_dist_pred_probs),
key = "Category", value = "Probability", -max_dist)
aic_dist_pred_probs_long$Category <- factor(aic_dist_pred_probs_long$Category,
levels = c("geog", "env", "landres"),
labels = c("IBD", "IBE", "IBR"))
aic_distplot <- plot_multinom(aic_dist_pred_probs_long, "max_dist", "n.s.")
aic_distplot
# Arrange the plots
mrm_distplot <- mrm_distplot + ggtitle("MRM")
aic_distplot <- aic_distplot + ggtitle("LME") + theme(axis.title.y = element_blank())
aic_popplot <- aic_popplot + theme(axis.title.y = element_blank(), plot.margin=margin(20,0,0,0))
mrm_popplot <- mrm_popplot + theme(plot.margin=margin(20,0,0,0))
combined_plot <- ggarrange(
mrm_distplot, aic_distplot, mrm_popplot, aic_popplot,
ncol = 2, nrow = 2,
common.legend = TRUE, legend = "right",
labels = c("A", "B", "C", "D")
)
print(combined_plot)
# ggsave("plots/driver_multinom.svg", plot = combined_plot, width = 10, height = 8)
# Function to calculate predicted probabilities
get_predictions <- function(model, new_data) {
predict(model, new_data, type = "probs")
}
# Bootstrapping
set.seed(123)  # For reproducibility
n_boot <- 1000
boot_preds <- replicate(n_boot, {
# Resample the data with replacement
boot_data <- pop_r_df[sample(nrow(pop_r_df), replace = TRUE), ]
# Fit the multinomial model
boot_model <- nnet::multinom(top_ranked ~ populations, data = boot_data)
# Predict probabilities for the sequence
get_predictions(boot_model, new_data)
}, simplify = FALSE)
# Aggregate bootstrapped predictions
boot_means <- do.call(rbind, lapply(boot_preds, colMeans))
ci_bounds <- apply(boot_means, 2, quantile, probs = c(0.025, 0.975))
# Add CIs to the data frame
pred_probs_long <- pred_probs_long %>%
group_by(Category, populations) %>%
mutate(
CI_lower = ci_bounds[1, ],
CI_upper = ci_bounds[2, ]
)
# Plot with CIs
mrm_popplot_ci <- ggplot(pred_probs_long, aes(x = populations, y = Probability, color = Category)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper, fill = Category), alpha = 0.2, linetype = 0) +
scale_color_brewer(palette = "Dark2", name = "Driver") +
scale_fill_brewer(palette = "Dark2", name = "Driver") +
labs(
x = "Number of Populations",
y = "Probability"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12, face = "bold")
)
mrm_popplot_ci
# Function to calculate predicted probabilities
get_predictions <- function(model, new_data) {
predict(model, new_data, type = "probs")
}
# Bootstrapping
set.seed(123)  # For reproducibility
n_boot <- 1000
boot_preds <- replicate(n_boot, {
# Resample the data with replacement
boot_data <- pop_r_df[sample(nrow(pop_r_df), replace = TRUE), ]
# Fit the multinomial model
boot_model <- nnet::multinom(top_ranked ~ populations, data = boot_data)
# Predict probabilities for the sequence
get_predictions(boot_model, new_data)
}, simplify = FALSE)
boot_preds
# Aggregate bootstrapped predictions
boot_means <- do.call(rbind, lapply(boot_preds, colMeans))
View(boot_preds)
# Combine predictions from bootstrap replicates into a 3D array
boot_array <- simplify2array(boot_preds)
# Calculate means and confidence intervals for each population value and category
mean_probs <- apply(boot_array, c(1, 2), mean)
boot_arraay
boot_array
View(boot_array)
# Calculate means and confidence intervals for each population value and category
mean_probs <- apply(boot_array, c(1, 2), mean)
str(boot_preds)
# Combine predictions from bootstrap replicates into a 3D array
boot_array <- simplify2array(boot_preds)
dim(boot_array)
class(boot_array)
if (!requireNamespace("abind", quietly = TRUE)) install.packages("abind")
library(abind)
# Combine predictions from bootstrap replicates into a 3D array
boot_array <- abind::abind(boot_preds, along = 3)
invalid_preds <- sapply(boot_preds, function(x) !is.matrix(x) || dim(x)[1] != length(pop_seq) || dim(x)[2] != 3)
which(invalid_preds)  # Indices of problematic elements
invalid_preds <- sapply(boot_preds, function(x) !is.matrix(x) || dim(x)[1] != length(pop_seq) || dim(x)[2] != 3)
which(invalid_preds)  # Indices of problematic elements
valid_boot_preds <- boot_preds[!invalid_preds]
# Convert to array
boot_array <- array(unlist(valid_boot_preds), dim = c(length(pop_seq), 3, length(valid_boot_preds)))
# Calculate means and confidence intervals for each population value and category
mean_probs <- apply(boot_array, c(1, 2), mean)
ci_lower <- apply(boot_array, c(1, 2), quantile, probs = 0.025)
ci_upper <- apply(boot_array, c(1, 2), quantile, probs = 0.975)
# Calculate means and confidence intervals for each population value and category
mean_probs <- apply(boot_array, c(1, 2), mean)
ci_lower <- apply(boot_array, c(1, 2), quantile, probs = 0.05)
ci_upper <- apply(boot_array, c(1, 2), quantile, probs = 0.95)
# Reshape the data for plotting
pop_seq <- seq(min(pop_r_df$populations), max(pop_r_df$populations), length.out = 120)
pred_probs_long <- data.frame(
populations = rep(pop_seq, times = ncol(mean_probs)),
Category = rep(colnames(mean_probs), each = nrow(mean_probs)),
Probability = as.vector(mean_probs),
CI_lower = as.vector(ci_lower),
CI_upper = as.vector(ci_upper)
)
mean_probs
ci_lower
pop_seq
pred_probs_long <- data.frame(
populations = rep(pop_seq, times = ncol(mean_probs)),
Category = rep(colnames(mean_probs), each = nrow(mean_probs)),
Probability = as.vector(mean_probs),
CI_lower = as.vector(ci_lower),
CI_upper = as.vector(ci_upper)
)
boot_data
?sample
nrow(pop_r_df)
pred_probs_long <- data.frame(
populations = rep(pop_seq, times = ncol(mean_probs)),
Category = rep(colnames(mean_probs), each = nrow(mean_probs)),
Probability = as.vector(mean_probs),
CI_lower = as.vector(ci_lower),
CI_upper = as.vector(ci_upper)
)
ci_lower
ci_upper
dim(mean_probs)
dim(ci_lower)
dim(ci_upper)
dim(boot_array)
print(mean_probs)
print(ci_lower)
print(ci_upper)
length(pop_seq) == nrow(mean_probs)
colnames(mean_probs)
mean_probs
colnames(mean_probs) <- c("IBD", "IBE", "IBR")
# Reshape the data for plotting
pop_seq <- seq(min(pop_r_df$populations), max(pop_r_df$populations), length.out = 120)
pred_probs_long <- data.frame(
populations = rep(pop_seq, times = ncol(mean_probs)),
Category = rep(colnames(mean_probs), each = nrow(mean_probs)),
Probability = as.vector(mean_probs),
CI_lower = as.vector(ci_lower),
CI_upper = as.vector(ci_upper)
)
# Ensure Category is a factor with correct labels
pred_probs_long$Category <- factor(pred_probs_long$Category,
levels = c("geog", "env", "landres"),
labels = c("IBD", "IBE", "IBR"))
# Plot with confidence intervals
mrm_popplot_ci <- ggplot(pred_probs_long, aes(x = populations, y = Probability, color = Category)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper, fill = Category), alpha = 0.2, linetype = 0) +
scale_color_brewer(palette = "Dark2", name = "Driver") +
scale_fill_brewer(palette = "Dark2", name = "Driver") +
labs(
x = "Number of Populations",
y = "Probability"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12, face = "bold")
)
mrm_popplot_ci
View(pred_probs_long)
pred_probs_long$Category
colnames(mean_probs)
# Reshape the data for plotting
pop_seq <- seq(min(pop_r_df$populations), max(pop_r_df$populations), length.out = 120)
pred_probs_long <- data.frame(
populations = rep(pop_seq, times = ncol(mean_probs)),
Category = rep(colnames(mean_probs), each = nrow(mean_probs)),
Probability = as.vector(mean_probs),
CI_lower = as.vector(ci_lower),
CI_upper = as.vector(ci_upper)
)
pred_probs_long
# Ensure Category is a factor with correct labels
pred_probs_long$Category <- factor(pred_probs_long$Category,
levels = c("IBD", "IBE", "IBR"),
labels = c("IBD", "IBE", "IBR"))
# Plot with confidence intervals
mrm_popplot_ci <- ggplot(pred_probs_long, aes(x = populations, y = Probability, color = Category)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper, fill = Category), alpha = 0.2, linetype = 0) +
scale_color_brewer(palette = "Dark2", name = "Driver") +
scale_fill_brewer(palette = "Dark2", name = "Driver") +
labs(
x = "Number of Populations",
y = "Probability"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12, face = "bold")
)
mrm_popplot_ci
?sample
# Plot with confidence intervals
mrm_popplot_ci <- ggplot(pred_probs_long, aes(x = populations, y = Probability, color = Category)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper, fill = Category), alpha = 0.1, linetype = 0) +
scale_color_brewer(palette = "Dark2", name = "Driver") +
scale_fill_brewer(palette = "Dark2", name = "Driver") +
labs(
x = "Number of Populations",
y = "Probability"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12, face = "bold")
)
mrm_popplot_ci
pop_r_df
pop_r_df[sample(nrow(pop_r_df), replace = TRUE), ]
pop_r_df[sample(nrow(pop_r_df), replace = TRUE), ]
# Plot with confidence intervals
mrm_popplot_ci <- ggplot(pred_probs_long, aes(x = populations, y = Probability, color = Category)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper, fill = Category), alpha = 0.1, linetype = 0) +
scale_color_brewer(palette = "Dark2", name = "Driver") +
scale_fill_brewer(palette = "Dark2", name = "Driver") +
labs(
x = "Number of Populations",
y = "Probability"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12, face = "bold")
)
mrm_popplot_ci
# Plot with confidence intervals
mrm_popplot_ci <- ggplot(pred_probs_long, aes(x = populations, y = Probability, color = Category)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper, fill = Category), alpha = 0.15, linetype = 0) +
scale_color_brewer(palette = "Dark2", name = "Driver") +
scale_fill_brewer(palette = "Dark2", name = "Driver") +
labs(
x = "Number of Populations",
y = "Probability"
) +
theme_minimal() +
theme(
text = element_text(size = 12),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12, face = "bold")
)
mrm_popplot_ci
library(dplyr)
library(CoordinateCleaner)
library(dismo)
library(maptools)
library(raster)
library(biomod2)
library(remotes)
library(rgbif)
library(stringr)
# function for cropping raster stack with output of rasterstack for input into
# biomod2
cropRasterStack <- function(stack, e) {
cropped_predictors <- stack()
for (i in 1:length(names(stack))) {
cropped_layer <- crop(stack[[i]], extent(e))
cropped_predictors <- addLayer(cropped_predictors, cropped_layer)
}
return(cropped_predictors)
}
### ENVIRONMENTAL DATA ###
path <- "maps/bioclim/bioclim_5k"
bioclim_files <- list.files(path, pattern='tif$',full.names=TRUE)
# create a rasterStack of bioclim predictor variables
bioclim_predictors <-  stack(bioclim_files)
