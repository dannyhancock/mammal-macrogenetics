library(raster)
# function to project and aggregate rasters to same as bioclim rasters
resizeRasterStack <- function(source_stack, target_stack, agg_factor=4) {
print(names(source_stack))
if (identical(crs(source_stack), crs(target_stack))) {
print("Identical CRS, Aggregating")
resolution <- res(target_stack)
fact <- resolution/res(source_stack)
agg_raster <- aggregate(source_stack, fact, fun='mean')
} else {
print("Raster Stack Requires Reprojecting")
gc()
agg_raster <- aggregate(source_stack, fact=agg_factor) # this line is to make the projection manageable with small amounts of RAM but may need changing
agg_raster <- projectRaster(agg_raster, res=res(target_stack[[1]]), crs=crs(target_stack[[1]]))
}
return(agg_raster)
}
library(raster)
allsp <- readr::read_csv('all_species_gbif_coords.csv')
allsp <- na.omit(allsp)
e <- extent(x=c(ceiling(min(allsp$lon)), ceiling(max(allsp$lon))), y=c(ceiling(min(allsp$lat)),ceiling(max(allsp$lat))))+5
# crop all predictor stacks to same extent to allow stacking
cropped_bioclim <- cropRasterStack(predictors, e)
cropped_hfp <- resample(hf_predictors, cropped_bioclim)
library(raster)
################################
## Environmental Spatial Data ##
################################
# function to project and aggregate rasters to same as bioclim rasters
resizeRasterStack <- function(source_stack, target_stack, agg_factor=4) {
print(names(source_stack))
if (identical(crs(source_stack), crs(target_stack))) {
print("Identical CRS, Aggregating")
resolution <- res(target_stack)
fact <- resolution/res(source_stack)
agg_raster <- aggregate(source_stack, fact, fun='mean')
} else {
print("Raster Stack Requires Reprojecting")
gc()
agg_raster <- aggregate(source_stack, fact=agg_factor) # this line is to make the projection manageable with small amounts of RAM but may need changing
agg_raster <- projectRaster(agg_raster, res=res(target_stack[[1]]), crs=crs(target_stack[[1]]))
}
return(agg_raster)
}
##################
## Bioclim Maps ##
##################
# Other maps will be projected and aggregated to match Bioclim maps:
# WGS84 projection 5km resolution
bc_path <- "maps/bioclim/bioclim_5k"
bc_files <- list.files(bc_path, pattern='tif$', full.names=TRUE)
bc_predictors <- stack(bc_files)
##################
## Collinearity ##
##################
hfp_path <- "maps/human_footprint/processed"
hfp_files <- list.files(hfp_path, pattern='tif$', full.names=TRUE)
hfp_predictors <- stack(hfp_files)
cop_path <- "maps/copernicus/processed"
cop_files <- list.files(cop_path, pattern='tif$', full.names=TRUE)
cop_predictors <- stack(cop_files)
# Loop through each data folder and extract the coordinates
allsp <- readr::read_csv('all_species_gbif_coords.csv')
allsp <- na.omit(allsp)
e <- extent(x=c(ceiling(min(allsp$lon)), ceiling(max(allsp$lon))), y=c(ceiling(min(allsp$lat)),ceiling(max(allsp$lat))))+5
# crop all predictor stacks to same extent to allow stacking
cropped_bioclim <- cropRasterStack(predictors, e)
e <- extent(x=c(ceiling(min(allsp$lon)), ceiling(max(allsp$lon))), y=c(ceiling(min(allsp$lat)),ceiling(max(allsp$lat))))+5
# crop all predictor stacks to same extent to allow stacking
cropped_bioclim <- cropRasterStack(predictors, e)
# function for cropping raster stack with output of rasterstack
# (rather than rasterbrick) for input into biomod2
cropRasterStack <- function(stack, e) {
cropped_predictors <- stack()
for (i in 1:length(names(stack))) {
cropped_layer <- crop(stack[[i]], extent(e))
cropped_predictors <- addLayer(cropped_predictors, cropped_layer)
}
return(cropped_predictors)
}
# crop all predictor stacks to same extent to allow stacking
cropped_bioclim <- cropRasterStack(predictors, e)
cropped_hfp <- resample(hf_predictors, cropped_bioclim)
cropped_hfp <- resample(hfp_predictors, cropped_bioclim)
# crop all predictor stacks to same extent to allow stacking
cropped_bioclim <- cropRasterStack(predictors, e)
# crop all predictor stacks to same extent to allow stacking
cropped_bioclim <- cropRasterStack(bc_predictors, e)
cropped_hfp <- resample(hfp_predictors, cropped_bioclim)
cropped_cop <- resample(cop_predictors, cropped_bioclim)
# stack predictors variables
cropped_predictors <- addLayer(cropped_bioclim, cropped_hfp, cropped_cop)
# then extract coordinates and look for correlations
sampl <- cbind(allsp$lon, allsp$lat)
sampled_preds <- extract(cropped_predictors, sampl, 'bilinear')
cor_all <- cor(sampled_preds, method = 'pearson', use='complete.obs')
cor_all > 0.7
cor_all[cor_all > 0.7]
cor_all[,cor_all > 0.7]
cor_all > 0.7
# Read in all species coords
allsp <- readr::read_csv('all_species_gbif_coordinates.csv')
allsp <- na.omit(allsp)
# then extract coordinates and look for correlations
sampl <- cbind(allsp$lon, allsp$lat)
sampled_preds <- extract(cropped_predictors, sampl, 'bilinear')
cor_all <- cor(sampled_preds, method = 'pearson', use='complete.obs')
cor_all > 0.7
# Read in all species coords
allsp <- readr::read_csv('all_species_gbif_coord.csv')
allsp <- na.omit(allsp)
# Read in all species coords
allsp <- readr::read_csv('all_species_gbif_coords.csv')
allsp <- na.omit(allsp)
# use the common name, from metadata.csv
SPECIES <- 'koala'
gbif_download = readr::read_tsv(normalizePath(paste("./data/",SPECIES,"/",SPECIES,"_occurrence.csv", sep=""),
winslash = "/", mustWork = TRUE))
library(dplyr)
library(CoordinateCleaner)
library(dismo)
library(maptools)
library(raster)
library(biomod2)
library(remotes)
library(rgbif)
library(stringr)
# function for cropping raster stack with output of rasterstack (rather than rasterbrick)
# for input into biomod2
cropRasterStack <- function(stack, e) {
cropped_predictors <- stack()
for (i in 1:length(names(stack))) {
cropped_layer <- crop(stack[[i]], extent(e))
cropped_predictors <- addLayer(cropped_predictors, cropped_layer)
}
return(cropped_predictors)
}
# use the common name, from metadata.csv
SPECIES <- 'koala'
gbif_download = readr::read_tsv(normalizePath(paste("./data/",SPECIES,"/",SPECIES,"_occurrence.csv", sep=""),
winslash = "/", mustWork = TRUE))
## CLEANING OCCURRENCE DATA ##
gbif_download <- gbif_download %>%
setNames(tolower(names(.))) %>% # set lowercase column names to work with CoordinateCleaner
filter(occurrencestatus  == "PRESENT") %>% # only keep presence data
filter(!is.na(decimallongitude)) %>% # remove null coordinate occurrences, if any
filter(!is.na(decimallatitude)) %>%
filter(!basisofrecord %in% c("FOSSIL_SPECIMEN","LIVING_SPECIMEN")) %>%
filter(!establishmentmeans %in% c("MANAGED", "INTRODUCED", "INVASIVE", "NATURALISED")) %>%
filter(year >= 1900) %>% # remove old records
filter(coordinateprecision < 0.01 | is.na(coordinateprecision)) %>% # remove values with high uncertainty, missing values kept
filter(coordinateuncertaintyinmeters < 10000 | is.na(coordinateuncertaintyinmeters)) %>% # remove values with high uncertainty, missing values kept
filter(!coordinateuncertaintyinmeters %in% c(301,3036,999,9999)) %>% # known uncertainty values
filter(!decimallatitude == 0 | !decimallongitude == 0) %>% # remove points along prime meridian or equator
distinct(decimallongitude,decimallatitude,specieskey,datasetkey, .keep_all = TRUE) %>% # remove duplicates
cc_cen(buffer = 2000, lon="decimallongitude", lat="decimallatitude") %>% # remove country centroids within 2km
cc_cap(buffer = 2000, lon="decimallongitude", lat="decimallatitude") %>% # remove capitals centroids within 2km
cc_inst(buffer = 2000, lon="decimallongitude", lat="decimallatitude") %>% # remove zoo and herbaria within 2km
cc_sea(lon="decimallongitude", lat="decimallatitude") %>% # remove from ocean, as not marine species
dplyr::rename(lon = decimallongitude, lat = decimallatitude) %>%
glimpse() # look at results of pipeline======
write.csv(gbif_download[,c("lon", "lat")], paste("data/",SPECIES,"/",SPECIES,"_indiv_locations.csv", sep=""), row.names=FALSE)
# Read in all species coords
allsp <- readr::read_csv('all_species_gbif_coordinates.csv')
allsp <- na.omit(allsp)
e <- extent(x=c(ceiling(min(allsp$lon)), ceiling(max(allsp$lon))), y=c(ceiling(min(allsp$lat)),ceiling(max(allsp$lat))))+5
# stack predictors variables
cropped_predictors <- addLayer(cropped_bioclim, cropped_hfp, cropped_cop)
# then extract coordinates and look for correlations
sampl <- cbind(allsp$lon, allsp$lat)
sampled_preds <- extract(cropped_predictors, sampl, 'bilinear')
cor_all <- cor(sampled_preds, method = 'pearson', use='complete.obs')
# Read in all species coords
allsp <- readr::read_csv('all_species_gbif_coordinates.csv')
e <- extent(x=c(ceiling(min(allsp$lon)), ceiling(max(allsp$lon))), y=c(ceiling(min(allsp$lat)),ceiling(max(allsp$lat))))+5
# stack predictors variables
cropped_predictors <- addLayer(cropped_bioclim, cropped_hfp, cropped_cop)
# then extract coordinates and look for correlations
sampl <- cbind(allsp$lon, allsp$lat)
nrow)sampl
nrow(sampl)
sampled_preds <- extract(cropped_predictors, sampl, 'bilinear')
cor_all <- cor(sampled_preds, method = 'pearson', use='complete.obs')
cor_all > 0.7
# Read in all species coords
allsp <- readr::read_csv('all_species_gbif_coordinates.csv')
e <- extent(x=c(ceiling(min(allsp$lon)), ceiling(max(allsp$lon))), y=c(ceiling(min(allsp$lat)),ceiling(max(allsp$lat))))+5
# then extract coordinates and look for correlations
sampl <- cbind(allsp$lon, allsp$lat)
sampled_preds <- extract(cropped_predictors, sampl, 'bilinear')
cor_all <- cor(sampled_preds, method = 'pearson', use='complete.obs')
cor_all > 0.7
# Read in all species coords
allsp <- readr::read_csv('all_species_gbif_coords.csv')
# then extract coordinates and look for correlations
sampl <- cbind(allsp$lon, allsp$lat)
sampled_preds <- extract(cropped_predictors, sampl, 'bilinear')
cor_all <- cor(sampled_preds, method = 'pearson', use='complete.obs')
cor_all > 0.7
# Read in all species GBIF coordinates
dirs <- list.dirs(path = "data", full.names = TRUE, recursive = TRUE)
dirs
# Read in all species GBIF coordinates
dirs <- list.dirs(path = "data/", full.names = TRUE, recursive = TRUE)
dirs
# Read in all species GBIF coordinates
dirs <- list.dirs(path = "data/", full.names = FALSE, recursive = FALSE)
dirs
allsp <- data.frame()
for (dir in dirs) {
sp <- read.csv(paste("data/", dir, paste0(dir, "_occurrence.csv"), sep=""))
allsp <- rbind(allsp, sp)
}
sp <- read.csv(paste("data", dir, paste0(dir, "_occurrence.csv"), sep="/"))
bc_predictors[c('wc2.1_2.5m_bio_10')]
?dropLayer
hfp_predictors
cop_predictors
# Move the correlated bioclim predictors into a separate folder
bioclim_dir <- 'maps/bioclim/bioclim_5k'
output_path = './maps/bioclim/bioclim_5k/unused'
output_path = 'maps/bioclim/bioclim_5k/unused'
files_in_bioclim <- list.files(bioclim_dir)
files_in_bioclim
files_to_move <- setdiff(files_in_bioclim, allowed_files)
files_to_move <- setdiff(files_in_bioclim, bioclim_predictors)
e
# keep most biologically interpretable uncorrelated layers
bioclim_predictors <- c('wc2.1_2.5m_bio_1', 'wc2.1_2.5m_bio_2', 'wc2.1_2.5m_bio_4', 'wc2.1_2.5m_bio_8',
'wc2.1_2.5m_bio_12', 'wc2.1_2.5m_bio_15', 'wc2.1_2.5m_bio_18')
uncorrelated_bc_predictors <- subset(bc_predictors, bioclim_predictors)
files_to_move <- setdiff(files_in_bioclim, bioclim_predictors)
files_to_move
files_in_bioclim <- list.files(bioclim_dir, pattern='tif$', full.names=F)
files_to_move <- setdiff(files_in_bioclim, bioclim_predictors)
files_to_move
for (file in files_to_move) {
file_path <- file.path(bioclim_dir, file)
dest_path <- file.path(unused_dir, file)
# Check if the unused folder exists, if not create it
if (!dir.exists(unused_dir)) {
dir.create(unused_dir)
}
# Move the file
file.rename(file_path, dest_path)
cat(paste("Moved:", file, "to unused folder.\n"))
}
unused_dir = 'maps/bioclim/bioclim_5k/unused'
files_in_bioclim <- list.files(bioclim_dir, pattern='tif$', full.names=F)
files_to_move <- setdiff(files_in_bioclim, bioclim_predictors)
for (file in files_to_move) {
file_path <- file.path(bioclim_dir, file)
dest_path <- file.path(unused_dir, file)
# Check if the unused folder exists, if not create it
if (!dir.exists(unused_dir)) {
dir.create(unused_dir)
}
# Move the file
file.rename(file_path, dest_path)
cat(paste("Moved:", file, "to unused folder.\n"))
}
files_to_move <- setdiff(files_in_bioclim, bioclim_predictors)
files_to_move
files_in_bioclim
bioclim_predictors
bioclim_predictors_tif <- paste0(bioclim_predictors, ".tif")
files_to_move <- setdiff(files_in_bioclim, bioclim_predictors_tif)
files_to_move
for (file in files_to_move) {
file_path <- file.path(bioclim_dir, file)
dest_path <- file.path(unused_dir, file)
# Check if the unused folder exists, if not create it
if (!dir.exists(unused_dir)) {
dir.create(unused_dir)
}
# Move the file
file.rename(file_path, dest_path)
cat(paste("Moved:", file, "to unused folder.\n"))
}
